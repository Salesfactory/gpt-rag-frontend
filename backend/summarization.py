# summarization.py
import base64
import logging
import os
from pathlib import Path
import pandas as pd
from llm_config import LLMManager

logger = logging.getLogger(__name__)

class DocumentSummarizer:
    def __init__(self):
        self.llm_manager = LLMManager()
        self.gpt_client = self.llm_manager.get_client("gpt4o")
        self.image_sys_prompt = self.llm_manager.get_prompt("image_analysis")
        self.final_summary_prompt = self.llm_manager.get_prompt("final_summary")

    def encode_image(self, image_path: str) -> str:
        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode('utf-8')

    def summarize_image(self, image_path: str) -> str:
        """
        Summarize the content of an image using the GPT model.

        This method encodes the image to a base64 string, sends it to the GPT model
        along with a system prompt and user message, and returns the generated summary.

        Args:
            image_path (str): The file path to the image to be summarized.

        Returns:
            str: The summary of the image content generated by the GPT model.
        """
        base64_image = self.encode_image(image_path)
        response = self.gpt_client.chat.completions.create(
            model=self.llm_manager.config["gpt4o"].model_name,
            messages=[
                {"role": "system", "content": self.image_sys_prompt},
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "Please describe what you see in this image in 2-3 sentences."},
                        {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}}
                    ]
                }
            ],
            max_tokens=300
        )
        return response.choices[0].message.content

    def process_document_images(self, image_base_dir: str) -> str:
        """
        Process images in the specified directory to generate summaries.

        This function iterates through all subdirectories within the given base directory,
        processes each image file (assumed to be in PNG format), and generates a summary
        for each image using the `summarize_image` method. The summaries are then compiled
        into a single string, ordered by page number.

        Args:
            image_base_dir (str): The base directory containing subdirectories of images to process.

        Returns:
            str: A concatenated string of summaries for all processed images, ordered by page number.
        """
        summaries = []
        file_names = []
        page_numbers = []
        
        image_base_dir = Path(image_base_dir)
        for folder_path in image_base_dir.iterdir():
            if folder_path.is_dir():
                logger.info(f"Processing folder: {folder_path.name}")
                for img_file in folder_path.glob("*.png"):
                    try:
                        summary = self.summarize_image(str(img_file))
                        file_name = img_file.name.split('.')[0]
                        page_num = int(file_name.split('_')[-1])
                        
                        summaries.append(summary)
                        file_names.append(file_name)
                        page_numbers.append(page_num)
                        
                        logger.info(f"Processed: {img_file.name}")
                    except Exception as e:
                        logger.error(f"Error processing {img_file.name}: {str(e)}")

        summary_df = pd.DataFrame({
            'page_number': page_numbers,
            'file_name': file_names,
            'summary': summaries
        }).sort_values('page_number')

        return "\n".join(summary_df['summary'].tolist())

    def generate_final_summary(self, all_summaries: str) -> str:
        """
        Generate a final summary from all individual summaries.

        This function uses the GPT4o model to generate a comprehensive summary
        from the concatenated string of all individual summaries.

        Args:
            all_summaries (str): A concatenated string of summaries for all processed images.

        Returns:
            str: The final summary generated by the GPT model.
        """
        response = self.gpt_client.chat.completions.create(
            model=self.llm_manager.config["gpt4o"].model_name,
            messages=[
                {"role": "system", "content": self.final_summary_prompt},
                {"role": "user", "content": [{"type": "text", "text": all_summaries}]}
            ],
            max_tokens=1500
        )
        return response.choices[0].message.content
    
    def format_summary(self, summary) -> str:
        """
        Format the final summary for display.

        This function uses the GPT4o model to generate a formatted final summary

        Returns:
            str: The formatted final summary.
        """

        if not summary:
            return None

        try:
            llm = self.llm_manager.get_client(
                client_type='gpt4o',
                use_langchain=True
            )

            prompt = f"""
        Please format the following summary into clean markdown, ensuring it is easy to read and understand. 
        Use headers, bullet points, and numbered lists where appropriate. 
        Maintain the original information and structure as much as possible, but improve the presentation.

        Do not include any markdown code blocks (e.g., ```markdown) at the start or end of the response.

        Summary:
        {summary}

        Markdown:
        """
            
            response = llm.invoke(prompt)
            markdown_output = response.content.strip()
            return markdown_output
        except Exception as e:
            logger.exception(f"Error parsing the report to email schema: {str(e)}")
            raise 